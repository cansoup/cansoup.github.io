I"7<h2 id="ch18-함수와-일급-객체">Ch18. 함수와 일급 객체</h2>

<h3 id="181-일급-객체">18.1 일급 객체</h3>

<ul>
  <li>무명의 리터럴로 생성할 수 있다. 즉, 런타임에 생성 가능하다.</li>
  <li>변수나 자료구조(객체, 배열 등)에 저장할 수 있다.</li>
  <li>함수의 매개변수에 전달할 수 있다.</li>
  <li>함수의 반환값으로 사용할 수 있다.</li>
</ul>

<blockquote>
  <p><strong>함수</strong>는 일급 객체이다.</p>
</blockquote>

<ol>
  <li>함수는 무명의 리터럴로 생성할 수 있다.</li>
  <li>함수는 변수에 저장할 수 있다.
    <pre><code class="language-javascript">const increase = function (num) { 
  return ++num;
}
</code></pre>
  </li>
  <li>함수는 객체에 저장할 수 있다.</li>
</ol>

<pre><code class="language-javascript">const decrease = function (num) {
  return --num;
}

const auxs = { increase, decrease };
</code></pre>

<p>// 3. 함수의 매개변수에 전달 할 수 있다.
// 4. 함수의 반환값으로 사용할 수 있다.
function makeCounter(aux) {
	let num = 0;</p>

<pre><code>return function () {
	num = aux(num);
	return num;
}; }
</code></pre>

<p>// 3. 함수는 매개변수에게 함수를 전달할 수 있다.
const increaser = makeCounter(auxs.increase);
console.log(increaser); // 1
console.log(increaser); // 2</p>

<p>const decreaser = makeCounter(auxs.decrease);
console.log(decreaser); // -1
```</p>

<p>Q. increaser와 decreaser는 서로 다른 것을 참조하고 있는가?</p>

<h3 id="182-함수-객체의-프로퍼티">18.2 함수 객체의 프로퍼티</h3>

<p>함수는 일반 객체에는 없는 고유의 프로퍼티를 소유한다.</p>

<ul>
  <li>함수 객체 고유의 프로퍼티 : <code>arguments</code>, <code>caller</code>, <code>length</code>,  <code>name</code>, <code>prototype</code></li>
  <li><code>__proto__</code> 는  Object.prototype 객체의 접근자 프로퍼티이다.
<code>square()</code> 는 Object.prototype 객체로부터 <code>__proto__</code> 접근자 프로퍼티를 상속받는다.
    <ol>
      <li>arguments 프로퍼티</li>
    </ol>
    <ul>
      <li>arguments 객체
        <ul>
          <li>함수 호출 시 전달된 인수들의 정보를 담고 있는 순회 가능한 <code>유사 배열 객체</code></li>
          <li>함수 정의 시 선언한 매개변수는 함수 몸체 내부에서 변수와 동일하게 취급되어, 함수가 호출되면 함수 몸체 내에서 암묵적으로 매개변수가 선언되고 <code>undefined</code>로 초기화된 이후 인수가 할당된다. - 인수가 모자란 경우 undefined로 초기화된 상태를 유지하고, 인수가 초과한 경우 무시되지만 버려지지 않고 arguments 객체의 프로퍼티로 보관된다.</li>
          <li>
            <p><code>가변 인자 함수</code>를 구현에 사용 - 매개변수 개수를 확정할 수 없는 함수
  ⇒ ES6에서는 Rest 파라미터를 도입하여 arguments 객체를 사용하지 않아도 구현할 수 있다</p>

            <pre><code class="language-jsx">  function sum(...args) { 
  	// 내용
  }
</code></pre>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<ol>
  <li>caller 프로퍼티
    <ul>
      <li>비표준 프로퍼티</li>
    </ul>
  </li>
  <li>length 프로퍼티
    <ul>
      <li>함수를 정의할 때 선언한 매개변수의 개수</li>
      <li>arguments 객체의 length(인자 개수) ≠ 함수 객체의 length(매개변수 개수)</li>
    </ul>
  </li>
  <li>name 프로퍼티
    <ul>
      <li>함수 이름</li>
      <li>
        <p>익명 함수 표현식의 경우 ES6에서 함수 객체를 가리키는 식별자를 값으로 갖는다.</p>

        <p><img src="JS%20%E1%84%80%E1%85%A9%E1%86%BC%E1%84%87%E1%85%AE%E1%84%86%E1%85%A9%20e254a/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2022-03-17_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_1.20.25.png" alt="스크린샷 2022-03-17 오전 1.20.25.png" /></p>
      </li>
    </ul>
  </li>
  <li><strong>proto</strong> 접근자 프로퍼티
    <ul>
      <li><code>[[Prototype]]</code>내부 슬롯이 가리키는 프로토타입 객체에 접근하기 위해 사용하는 접근자 프로퍼티다.</li>
    </ul>
  </li>
  <li>prototype 프로퍼티
    <ul>
      <li><code>constructor</code>만이 소유하는 프로퍼티
 ⇒ 일반 객체와 생성자 함수로 호출할 수 없는 non-constructor에는 prototype 프로퍼티가 없다.</li>
    </ul>
  </li>
</ol>

<p><a href="#top">[Top]</a></p>
:ET